const CACHE_NAME="extrahand-v1",API_CACHE_NAME="extrahand-api-v1",urlsToCache=["/","/static/js/bundle.js","/static/css/main.css","/manifest.json"];self.addEventListener("install",e=>{e.waitUntil(caches.open(CACHE_NAME).then(e=>e.addAll(urlsToCache)).catch(e=>{})),self.skipWaiting()}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==CACHE_NAME&&e!==API_CACHE_NAME)return caches.delete(e)})))),self.clients.claim()}),self.addEventListener("fetch",e=>{const{request:t}=e;new URL(t.url).pathname.startsWith("/api/")?e.respondWith(fetch(t).then(e=>{if(e.ok&&"GET"===t.method){const a=e.clone();caches.open(API_CACHE_NAME).then(e=>{e.put(t,a)})}return e}).catch(e=>caches.match(t).then(e=>e||new Response(JSON.stringify({error:"Network error",message:"Unable to connect to server"}),{status:503,statusText:"Service Unavailable",headers:{"Content-Type":"application/json"}})))):e.respondWith(caches.match(t).then(e=>e||fetch(t).then(e=>{const a=e.clone();return caches.open(CACHE_NAME).then(e=>{e.put(t,a)}),e})).catch(e=>{if("navigate"===t.mode)return caches.match("/");throw e}))});